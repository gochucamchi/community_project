pip install djangorestframework 
RESTful API를 구축하는 것은 HTTP 요청 처리, 응답 구조화, 데이터 직렬화, 인증, 권한 관리 등의 복잡한 작업을 처리해야하는 경우가 많습니다. Django REST Framework 또는 DRF는 RESTful API 구축을 더 쉽게하는 강력하고 유연한 도구 상자입니다.

DRF는 Django의 기본 개념을 기반으로하여 API 개발을 확장합니다. 데이터 직렬화, 요청 및 응답 처리, 인증, 권한 관리 등 API 구축에 관련된 일반적인 작업을 단순화하는 클래스, 메서드 및 도구를 제공합니다.

DRF 주요 기능
Django REST Framework (DRF)은 RESTful API를 구축하기 위한 강력한 도구로써 다양한 기능을 제공합니다. Django REST Framework의 주요 기능은 다음과 같습니다:

직렬화: DRF는 복잡한 Python 객체를 JSON 또는 다른 콘텐츠 유형으로 변환하기 위한 견고한 직렬화 프레임워크를 제공합니다. 직렬화기를 정의하여 API 응답에서 데이터가 표시되는 방식과 들어오는 데이터가 처리되는 방식을 제어할 수 있습니다.

인증과 권한: DRF는 토큰 기반 인증, 세션 인증, OAuth 등 다양한 인증 체계를 제공하여 API를 보안합니다. 또한 사용자 역할과 권한에 기반하여 리소스에 대한 액세스를 제어하는 유연한 권한 시스템을 제공합니다.

뷰셋과 라우터: DRF는 뷰셋이라는 개념을 도입하였습니다. 뷰셋은 단일 모델 또는 리소스에 대한 여러 개의 뷰를 결합하는 클래스입니다. 뷰셋은 생성, 조회, 업데이트, 삭제(CRUD) 등의 작업을 쉽게 수행할 수 있도록 지원합니다. DRF는 뷰셋에 대한 URL 라우팅을 간소화하기 위해 자동으로 URL 패턴을 생성하는 라우터를 포함하고 있습니다.

Browsable API: DRF는 Browsable API 기능을 제공하여 개발자가 웹 브라우저를 통해 API와 상호 작용할 수 있도록 합니다. 이 기능은 API의 사용자 친화적인 HTML 표현을 제공하며, 요청 제출을 위한 양식, 엔드포인트 간의 탐색, 페이지네이션 지원 등을 포함합니다.

페이지네이션: DRF는 대량의 데이터셋을 페이지별로 나누어 API 성능을 최적화하고 사용자 경험을 향상시키기 위한 기능을 내장하고 있습니다. 커서 기반 페이지네이션, 페이지 번호 기반 페이지네이션 및 사용자 정의 페이지네이션 옵션과 같은 다양한 페이지네이션 전략을 제공합니다.

필터링과 정렬: DRF는 쿼리 매개변수를 사용하여 API 쿼리셋을 쉽게 필터링하고 정렬할 수 있도록 지원합니다. 완전히 일치하는, 부분 일치하는, 대소문자를 구분하지 않는 등의 일반적인 필터링 작업에 대한 필터 백엔드를 제공합니다. 또한 DRF는 여러 필드를 기준으로 정렬하고 사용자 정의 정렬 옵션을 지원합니다.

콘텐츠 네고시에이션: DRF는 콘텐츠 네고시에이션을 지원하여 클라이언트가 JSON, XML 또는 HTML과 같은 다른 형식으로 데이터를 요청할 수 있도록 합니다. API는 클라이언트의 요청에 따라 적절한 콘텐츠 유형을 자동으로 결정할 수 있습니다.

직렬화 유효성 검사: DRF는 직렬화 유효성 검사 기능을 제공하여 들어오는 데이터가 직렬화기에서 정의한 데이터 유형, 필드 제약 조건 및 유효성 검사 규칙을 준수하는지 확인할 수 있습니다.

버전 관리: DRF는 API 버전 관리를 지원하여 다양한 API 버전을 관리하고 역호환성을 처리할 수 있도록 합니다.

테스트 프레임워크: DRF는 API 테스트를 간소화하기 위해 테스트 클래스와 유틸리티를 제공하는 테스트 프레임워크를 제공합니다. 이를 통해 API 테스트를 생성하고 요청을 시뮬레이트하며 응답을 유효성 검사할 수 있습니다.

Django REST Framework의 이러한 기능들은 그 인기를 높이고, Django 프로젝트에서 RESTful API를 구축하는 우선적인 선택으로 만들었습니다. 이러한 기능들은 개발자들이 API 개발 과정을 간소화하고 코드 품질을 유지하며 견고하고 확장 가능한 API를 제공하는 데 도움이 됩니다.
