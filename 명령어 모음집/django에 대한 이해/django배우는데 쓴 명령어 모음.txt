print(os.getcwd())
os.chdir("가고 싶은 경로")

py manage.py migrate
py manage.py startapp app

django배우는데 쓴 명령어 모음
cmd 에서 python을 치면cmd terminal이 python으로 바뀐다
설치 파트
pip install virtualenv -> 가상환경 패키지 라이브러리
virtualenv myenv(이름은 내가 정함) -> 가상환경을 만드는 명령어
\path\to\env(myenv)\Scripts\activate 실행 ->가상환경 구동

--프로젝트 만들기--
pip install Django -> python에서 장고를 설치한다
django-admin startproject 이름(mysite) -> 장고로 프로젝트를 만든다.
프로젝트 폴더안(mysite)경로에서 py manage.py runserver -> 서버를 구동한다.
--프로젝트 만드는 것이 됨--

--앱을 만드는 방법-- 특정 기능만 수행하게 만드는 것.
py manage.py startapp app이름(polls)

mysit의 url은 project의 url로 최상위에 위치해 있고 그 밑의 하위 앱에 있는 url에서 연결
을 시켜주는 것이 가능하다.
상위 쪽에는(mysite)
urlpatterns = [
	path('polls/', include('polls.urls')),
	path('admin/', admin.site.urls),
]
하위쪽에서는 (polls)
urlpatterns = [
	path('', views.index, name='index'),
]
연결을 views라는 곳으로 시켜주는 방식이다.

view는 기본적으로
def index(request):
    return HttpResponse("Hello, World")
이렇게 되어 있다.

settings.py에서 데이터베이스를 바꿀 수 있다.

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
기본적으로 제공되는 앱들

내가 만든 앱을 적용하고 싶으면
앱이름.apps.앱이름Config
polls.apps.PollsConfig -> polls파일의 apps라는 python폴더에서 PollsConfig라는 클래스가 있음.

py manage.py migrate = 이러한 앱들은 하나 이상의 데이터베이스 테이블을 사용하는데
이 명령은 데이터 베이스테이블을 생성하는 명령어이다.

--모델 만들기--는 클래스를 만들어서 잘 처리하면 된다
models 파일에서 클래스를 만든다
명령어로는
변수 = models.CharField(max_length=200)
변수 = models.DateTimeField('date publicshed')
변수 = models.ForeignKey(Question, on_delete=models.CASCADE) #외래키 -> Question이라는 데이터 모델을 참조하겠다는 뜻, CASCADE는 데이터가 변하면 같이 변한다는 의미
변수 = models.IntegerField(default=0) 인트형 타입
--

py manage.py makemigrations polls
모델을 작성해 놨을 경우 마이그레이션이라는 디렉토리 장소에다가 이 모델들을
데이터베이스내에 테이블을 생성할 수 있도록 설계도를 만드는 작업을
하는 것이다.

--데이터 베이스에서 테이블 만들기--
py manage.py migrate 데이터베이스에서 테이블 만들기

--api 가지고 놀기-- api란 개발자가 필요로 하는 데이터를 뽑아낼 수 있도록 만든 함수
서버나 데이터베이스에게 데이터를 입력할 수 있도록 만들어 놓은 함수 같은 것
py manage.py shell

from polls.models import Choice, Question 모델(클래스)을 받아오는 것
polls이라는 앱에 있는 choice와 question 모델을 가져온다

Question.objects.all() -> 현재 Question내의 모든 데이터를 가지고 와라 객체의 개수로 표현함
from django.utils import timezone -> django라이브러리의 timezone을 다운

추가하기 예제
q = Question(question_text="What's new?", pub_date=timezone.now()) -> 클래스 내용대로 저장
q.save() q에 대해서 저장
q.id id는 클래스에서 딱히 만들지 않아도 알아서 생성해주는 것
q.pub_date 내가 클래스에서 만든 변수의 데이터를 가져와 보는 것.

Question.objects.all() -> 했을때 객체에서 내가 원하는 정보를 제대로 보지 못할수도 있음
그래서 클래스 내부에서 호출했을 때 원하는 거를 호출시켜줄 수 있어야함
def __str__(self):
	return self.question_text
def __str__(self):
	return self.choice_text

import datetime
from django.utils import timezone
datetime.timedelta
return self.pub_date >= timezone.now() - datetime.timedelta(days=1)
#현재의 시간에서 하루를 차감한 어제의 데이터와 저장된 데이터중에 
저장된 데이터가 크거나 같은지 확인한다 
#->저장된 날자가 어제이후인지 확인한다 

Question.objects.all()
Question.objects.filter(id=1)
Question.objects.filter(question_text__startwith=='What')

current_year = timezon.now().year
Question.objects.get(pub_date__year=current_year)

Question.object.get(id=2 )

--관리자 생성하기--
py manage.py createsuperuser

관리 사이트에서 poll app 변경하기
admin.py script에서 from .models import Question 넣어주기
from .module import Question
admin.site.register(Question)
